<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Style x:Key="office2007SilverButton" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource DefaultFontSize}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="6,3,6,3" />
        <Setter Property="MinWidth" Value="75" />
        <Setter Property="MinHeight" Value="23" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Name="Grid">
                        <Border Name="outsideBorder" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource buttonOutsideBorderDefaultBackgroundBrush}" BorderBrush="{StaticResource buttonOutsideBorderDefaultBorderBrush}" CornerRadius="0" />
                        <Border Name="defaultBorder" Margin="1" BorderBrush="{StaticResource buttonOutsideBorderIsMouseOverBorderBrush}" BorderThickness="1" Opacity="0" />
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0.3" />
                        <ContentPresenter Name="buttonContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="true" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="defaultBorder" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="defaultBorder" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="outsideBorder" Value="{StaticResource buttonOutsideBorderIsMouseOverBackgroundBrush}" Property="Background" />
                            <Setter TargetName="outsideBorder" Value="{StaticResource buttonOutsideBorderIsMouseOverBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="outsideBorder" Value="{StaticResource buttonOutsideBorderIsPressedBackgroundBrush}" Property="Background" />
                            <Setter TargetName="outsideBorder" Value="{StaticResource buttonOutsideBorderIsPressedBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="buttonContent" Property="ContentControl.Foreground" Value="{StaticResource DisabledForegroundBrush}"  />
                            <Setter Value="{StaticResource DisabledForegroundBrush}" Property="Foreground" />
                            <Setter TargetName="outsideBorder" Value="{StaticResource buttonOutsideBorderDisabledBackgroundBrush}" Property="Background" />
                            <Setter TargetName="outsideBorder" Value="{StaticResource buttonOutsideBorderDisabledBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type Controls1:SplitButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls1:SplitButton}">
                    <mwt:ButtonChrome x:Name="Chrome" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" RenderDefaulted="{TemplateBinding Button.IsDefaulted}" RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}" RenderPressed="{TemplateBinding ButtonBase.IsPressed}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
                            <Rectangle Grid.Column="1" Width="1" Fill="{TemplateBinding Foreground}" Opacity="0.4" Margin="0 4 0 4"/>
                            <Grid x:Name="SplitElement" Grid.Column="2" Background="Transparent">
                                <Path Data="M 0,0 L 8,0 L 4,4 Z" Fill="{TemplateBinding Foreground}" Margin="2 0 4 0" VerticalAlignment="Center"/>
                                <Popup x:Name="PopupElement">
                                    <ItemsControl ItemsSource="{Binding ButtonMenuItemsSource, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{TemplateBinding Foreground}" FlowDirection="{TemplateBinding FlowDirection}"
                                                  Background="White">
                                    </ItemsControl>
                                </Popup>
                            </Grid>
                        </Grid>
                    </mwt:ButtonChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
                            <Setter Property="mwt:ButtonChrome.RenderDefaulted" TargetName="Chrome" Value="True" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="mwt:ButtonChrome.RenderPressed" TargetName="Chrome" Value="True" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Control.Foreground" Value="#FFADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <!--<ControlTemplate x:Key="ImageButtonTemplate" TargetType="{x:Type Controls:ImageButton}">
        <Border x:Name="border" Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="{TemplateBinding ToolTip}" Padding="0" BorderThickness="1">
            <Image x:Name="ButtonImage" Source="{Binding NormalImage, RelativeSource={RelativeSource TemplatedParent}}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="border" Property="Background" Value="#c1d2ee" />
                <Setter TargetName="border" Property="BorderBrush" Value="#316ac4" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="ButtonImage" Property="Source" Value="{Binding DisabledImage, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Controls:ImageButton}">
        <Setter Property="Height" Value="16" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Template" Value="{StaticResource ImageButtonTemplate}" />
    </Style>

    <ControlTemplate x:Key="ToggleImageButtonTemplate" TargetType="{x:Type Controls:ToggleImageButton}">
        <Border x:Name="border" Height="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="{TemplateBinding ToolTip}" Padding="0" BorderThickness="1">
            <Image x:Name="ButtonImage" Source="{Binding NormalImage, RelativeSource={RelativeSource TemplatedParent}}" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="border" Property="Background" Value="#c1d2ee" />
                <Setter TargetName="border" Property="BorderBrush" Value="#316ac4" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="ButtonImage" Property="Source" Value="{Binding DisabledImage, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="ButtonImage" Property="Source" Value="{Binding CheckedImage, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Controls:ToggleImageButton}">
        <Setter Property="Height" Value="16" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Template" Value="{StaticResource ToggleImageButtonTemplate}" />
    </Style>-->

    <!--<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type DatePicker}, ResourceId=}" TargetType="{x:Type Button}">
    </Style>-->

</ResourceDictionary>